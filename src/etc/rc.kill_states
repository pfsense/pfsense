#!/usr/local/bin/php-cgi -f
<?php
/*
 * rc.kill_states
 *
 * part of pfSense (https://www.pfsense.org)
 * Copyright (c) 2004-2018 Rubicon Communications, LLC (Netgate)
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* parse the configuration and include all functions used below */
require_once("globals.inc");
require_once("config.inc");
require_once("interfaces.inc");
require_once("util.inc");

// Do not process while booting
if (platform_booting()) {
	return;
}

/* Interface address to cleanup states */
$interface = str_replace("\n", "", $argv[1]);

/* IP address to cleanup states */
$local_ip = str_replace("\n", "", $argv[2]);

if (empty($interface) || !does_interface_exist($interface)) {
	log_error("rc.kill_states: Invalid interface '{$interface}'");
	return;
}

if (!empty($local_ip)) {
	list($local_ip, $subnet_bits) = explode("/", $local_ip);

	if (empty($subnet_bits)) {
		$subnet_bits = "32";
	}

	if (!is_ipaddr($local_ip)) {
		log_error("rc.kill_states: Invalid IP address '{$local_ip}'");
		return;
	}
}

if (isset($config['system']['gw_down_kill_states'])) {
	if (!empty($local_ip)) {
		log_error("rc.kill_states: Removing states for IP {$local_ip}/{$subnet_bits}");
		$filter = array(
			array('interface' => $interface),
			array('filter' => $local_ip)
		);
		$states = pfSense_get_pf_states($filter);
		$cleared_states = array();
		foreach ($states as $state) {
			/* Locate and kill states for sources that NAT out through $local_ip */
			list($src, $srcport) = explode(":", $state['src']);
			list($dst, $dstport) = explode(":", $state['dst']);
			list($osrc, $osrcport) = explode(":", $state['src-orig']);
			/* If the local IP address isn't the source, or if this isn't
			 * a NAT state, or if we've already cleared this, skip it. */
			if (($src != $local_ip) ||
			    empty($state['src-orig']) ||
			    in_array("{$osrc},{$dst}", $cleared_states)) {
				continue;
			}

			$cleared_states[] = "{$osrc},{$dst}";
			pfSense_kill_states($osrc, $dst);
		}
		pfSense_kill_states("0.0.0.0/0", "{$local_ip}/{$subnet_bits}");
		pfSense_kill_states("{$local_ip}/{$subnet_bits}");
		pfSense_kill_srcstates("{$local_ip}/{$subnet_bits}");
	}
	log_error("rc.kill_states: Removing states for interface {$interface}");
	mwexec("/sbin/pfctl -i {$interface} -Fs", true);
}
