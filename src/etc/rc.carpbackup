#!/usr/local/bin/php-cgi -f
<?php
/*
 * rc.carpbackup
 *
 * part of pfSense (https://www.pfsense.org)
 * Copyright (c) 2004-2013 BSD Perimeter
 * Copyright (c) 2013-2016 Electric Sheep Fencing
 * Copyright (c) 2014-2020 Rubicon Communications, LLC (Netgate)
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require_once("functions.inc");
require_once("config.inc");
require_once("notices.inc");
require_once("openvpn.inc");
require_once("interfaces.inc");

if (isset($_GET['interface'])) {
	$argument = $_GET['interface'];
} else {
	$argument = str_replace("\n", "", $argv[1]);
}
$argument = ltrim($argument, '$');
if (!strstr($argument, "@")) {
	log_error("CARP master event triggered from wrong source {$argument}");
	exit;
}

list($vhid, $iface) = explode("@", $argument);

$friendly = convert_real_interface_to_friendly_interface_name($iface);
$friendly_descr = convert_friendly_interface_to_friendly_descr($friendly);
$vips = link_interface_to_vips($friendly, '', $vhid);
if (!is_array($vips)) {
	log_error("CARP master event triggered from wrong source {$argument} - no associated VIPs");
	exit;
}
foreach ($vips as $vip) {
	$notificationmsg = sprintf('HA cluster member "(%1$s@%2$s): (%3$s)" has resumed CARP state "BACKUP" for vhid %4$s',
		$vip['subnet'], $iface, $friendly_descr, $vhid);

	notify_all_remote($notificationmsg);
	log_error($notificationmsg);
}
restart_ppp_interfaces_using_interfaces($vips);

/* Stop OpenVPN clients running on this VIP, since multiple active OpenVPN clients on a CARP cluster can be problematic. */
global $config;
$a_groups = return_gateway_groups_array(true);
if (is_array($config['openvpn']) && is_array($config['openvpn']['openvpn-client'])) {
	foreach ($config['openvpn']['openvpn-client'] as $settings) {
		if (substr($settings['interface'], 0, 4) == '_vip') {
			$openvpn_vip = $settings['interface'];
		} else if (is_array($a_groups[$settings['interface']])) {
			// interface is a gateway group, check CARP VIP
			if (substr($a_groups[$settings['interface']][0]['vip'], 0, 4) == '_vip') {
				$openvpn_vip = $a_groups[$settings['interface']][0]['vip'];
			}
		} else {
			// this OpenVPN instance not on a CARP IP
			continue;
		}
		foreach ($vips as $vip) {
			if ($openvpn_vip == "_vip{$vip['uniqid']}") {
				log_error("Stopping OpenVPN client instance on {$friendly_descr} because of transition to CARP backup.");
				openvpn_restart('client', $settings);
			}
		}
	}
}

if (is_array($config['openvpn']) && is_array($config['openvpn']['openvpn-server'])) {
	foreach ($config['openvpn']['openvpn-server'] as $settings) {
		if (substr($settings['interface'], 0, 4) == '_vip') {
			$openvpn_vip = $settings['interface'];
		} else if (is_array($a_groups[$settings['interface']])) {
			// interface is a gateway group, check CARP VIP
			if (substr($a_groups[$settings['interface']][0]['vip'], 0, 4) == '_vip') {
				$openvpn_vip = $a_groups[$settings['interface']][0]['vip'];
			}
		} else {
			// this OpenVPN instance not on a CARP IP
			continue;
		}
		foreach ($vips as $vip) {
			if ($openvpn_vip == "_vip{$vip['uniqid']}") {
				log_error("Stopping OpenVPN server instance on {$friendly_descr} because of transition to CARP backup.");
				openvpn_restart('server', $settings);
			}
		}
	}
}

/* Reconfigure radvd when necessary */
if (isset($config['dhcpdv6']) && is_array($config['dhcpdv6'])) {
	$rafound = false;
	foreach ($config['dhcpdv6'] as $dhcpv6if => $dhcpv6ifconf) {
		foreach ($vips as $vip) {
			if ($dhcpv6ifconf['rainterface'] == "_vip{$vip['uniqid']}") {
				log_error("Stopping radvd instance on {$friendly_descr} because of transition to CARP master.");
				$rafound = true;
			}
		}
	}
	if ($rafound) {
		services_radvd_configure();
	}
}

$pluginparams = array();
$pluginparams['type'] = 'carp';
$pluginparams['event'] = 'rc.carpbackup';
$pluginparams['interface'] = $argument;
pkg_call_plugins('plugin_carp', $pluginparams);

?>
