#!/bin/sh
#
# rc.restore_ramdisk_store
#
# part of pfSense (https://www.pfsense.org)
# Copyright (c) 2004-2016 Rubicon Communications, LLC (Netgate)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgment:
#    "This product includes software developed by the pfSense Project
#    for use in the pfSenseÂ® software distribution. (http://www.pfsense.org/).
#
# 4. The names "pfSense" and "pfSense Project" must not be used to
#    endorse or promote products derived from this software without
#    prior written permission. For written permission, please contact
#    coreteam@pfsense.org.
#
# 5. Products derived from this software may not be called "pfSense"
#    nor may "pfSense" appear in their names without prior written
#    permission of the Electric Sheep Fencing, LLC.
#
# 6. Redistributions of any form whatsoever must retain the following
#    acknowledgment:
#
# "This product includes software developed by the pfSense Project
# for use in the pfSense software distribution (http://www.pfsense.org/).
#
# THIS SOFTWARE IS PROVIDED BY THE pfSense PROJECT ``AS IS'' AND ANY
# EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE pfSense PROJECT OR
# ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.

# Wildcard file existence check function
wildcard_file_exists() {
	for file in "$1"; do
		if [ -f "$file" ]; then
			return 0
			break
		fi
	done
	return 1
}

: ${DBPATH:=/var/dhcpd/var/db}
: ${CF_CONF_PATH:=/cf/conf}

: ${RAM_Disk_Store:=${CF_CONF_PATH}/RAM_Disk_Store}

# See if there are any backup files (*.tgz) in the RAM disk store.  If so, restore them.
if wildcard_file_exists "${RAM_Disk_Store}/"*".tgz"; then

	mesg="Restoring contents of RAM disk store..."
	echo -n "$mesg"

	# Set our operating platform
	PLATFORM=`/bin/cat /etc/platform`

	# Read product_name from $g, defaults to pfSense
	# Use php -n here because we are not ready to load extensions yet
	product=$(/usr/local/bin/php -n /usr/local/sbin/read_global_var product_name pfSense)

	USE_MFS_TMPVAR=$(/usr/local/sbin/read_xml_tag.sh boolean system/use_mfs_tmpvar)

	# Restore the ram disk
	for backup_file in "${RAM_Disk_Store}/"*".tgz"; do
		if [ -f "$backup_file" ]; then
			cd / && /usr/bin/tar -xzf "${backup_file}" -C / 2>&1
			exit_code=$?
			if [ $exit_code -ne 0 ]; then
				mesg="$mesg\nRAM disk restore failed: exit code $exit_code: $backup_file"
				error=1;
				continue
			fi

			mesg="$mesg\nRAM disk restore succeeded: $backup_file"

			#If this backup is still there on a full install, but we aren't going to use ram disks, remove the archive since this is a transition.
			if [ "${PLATFORM}" = "${product}" ] && [ "${USE_MFS_TMPVAR}" != "true" ]; then
				/bin/rm -f "${backup_file}"
			fi
		fi
	done

	if [ $error ]; then
		mesg="$mesg\nRAM disk restore failed."
		echo " error.";
	else
		mesg="$mesg\nRAM disk restore succeeded."
		echo " done.";
	fi

	/bin/mkdir -p /var/log/
	printf "$mesg" > /var/log/restore_ramdisk_store.boot

	# See if there are any backup files (*.tgz) in the RAM disk store.  If not, and no error, clean up.
	if ! wildcard_file_exists "${RAM_Disk_Store}/"*".tgz" && [ ! $error ]; then
		/bin/rmdir "$RAM_Disk_Store" >/dev/null 2>&1
		/bin/rm -f /var/log/restore_ramdisk_store.boot
	fi
fi
