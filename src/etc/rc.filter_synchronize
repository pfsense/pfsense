#!/usr/local/bin/php-cgi -f
<?php
/*
 * rc.filter_synchronize
 *
 * part of pfSense (https://www.pfsense.org)
 * Copyright (c) 2005 Bill Marquette
 * Copyright (c) 2006 Peter Allgeyer
 * Copyright (c) 2004-2013 BSD Perimeter
 * Copyright (c) 2013-2016 Electric Sheep Fencing
 * Copyright (c) 2014-2023 Rubicon Communications, LLC (Netgate)
 * All rights reserved.
 *
 * originally part of m0n0wall (http://m0n0.ch/wall)
 * Copyright (c) 2003-2004 Manuel Kasper <mk@neon1.net>.
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require_once("globals.inc");
require_once("config.inc");
require_once("config.lib.inc");
require_once("functions.inc");
require_once("filter.inc");
require_once("shaper.inc");
require_once("xmlrpc_client.inc");

/*
 *  backup_vip_config_section($section): returns as an xml file string of
 *                                   the configuration section
 */
function backup_vip_config_section() {
	$temp = array();
	$temp['vip'] = array();

	foreach (config_get_path('virtualip/vip', []) as $section) {
		if (($section['mode'] == 'proxyarp' || $section['mode'] == 'ipalias') &&
		    (strpos($section['interface'], '_vip') === FALSE) &&
		    (strpos($section['interface'], 'lo0') === FALSE)) {
			continue;
		}
		if ($section['advskew'] <> "") {
			$section_val = intval($section['advskew']);
			$section_val=$section_val+100;
			if ($section_val > 254) {
				$section_val = 254;
			}
			$section['advskew'] = $section_val;
		}
		if ($section['advbase'] <> "") {
			$section_val = intval($section['advbase']);
			if ($section_val > 254) {
				$section_val = 254;
			}
			$section['advbase'] = $section_val;
		}
		$temp['vip'][] = $section;
	}
	return $temp;
}

function carp_check_version($rpc_client) {
	global $g;

	if (file_exists("{$g['varrun_path']}/booting") || platform_booting()) {
		return;
	}

	$resp = $rpc_client->xmlrpc_method('host_firmware_version');
	$ver = config_get_path('version');
	log_error(sprintf(gettext("XMLRPC versioncheck: ").$resp['config_version'] ." -- ". $ver));
	if (!isset($resp['config_version'])) {
		update_filter_reload_status("The {$g['product_label']} software configuration version of the other member could not be determined. Skipping synchronization to avoid causing a problem!");
		log_error("The {$g['product_label']} software configuration version of the other member could not be determined. Skipping synchronization to avoid causing a problem!");
		return false;
	} elseif ($resp['config_version'] != $ver) {
		update_filter_reload_status("The other member is on a different configuration version of {$g['product_label']}. Sync will not be done to prevent problems!");
		log_error("The other member is on a different configuration version of {$g['product_label']}. Sync will not be done to prevent problems!");
		return false;
	} else {
		return true;
	}
	return false;
}

function carp_sync_xml($rpc_client, $sections) {
	global $config, $g;

	if (file_exists("{$g['varrun_path']}/booting") || platform_booting()) {
		return true;
	}

	/* make a copy of config */
	$config_copy = $config;

	/* strip out nosync items */
	$nosyncs = [
		'nat/outbound/rule',
		'nat/rule',
		'filter/rule',
		'aliases/alias',
		'dnsmasq/hosts',
		'ipsec/tunnel',
	];
	foreach ($nosyncs as $path) {
		$sect = array_get_path($config_copy, $path);
		if (!$sect) {
			continue;
		}
		array_set_path($config_copy,
				$path,
				array_filter($sect,
						function ($v) {
							return (!array_path_enabled($v, '', 'nosync'));
						}));
	}

	foreach (config_get_path('dhcpd', []) as $dhcpif => $dhcpifconf) {
		if (empty($dhcpifconf)) {
			continue;
		}
		$dhcpif_addr = array_get_path($config, "interfaces/{$dhcpif}/ipaddr");
		if (($dhcpifconf['failover_peerip'] <> "") && 
			$dhcpif_addr != null) {
			array_set_path($config_copy, "dhcpd/{$dhcpif}/failover_peerip", $dhcpif_addr);
		}
	}

	$xml = array();
	foreach ($sections as $section) {
		/*
		 * we can't use array_intersect_key()
		 * due to the vip 'special case'
		 */
		switch ($section) {
			case 'virtualip':
				array_set_path($xml, $section, backup_vip_config_section());
				break;
			case 'user':
				array_set_path($xml, "system/{$section}", array_get_path($config_copy, "system/{$section}", []));
				array_set_path($xml, "system/nextuid", array_get_path($config_copy, 'system/nextuid'));
				break;
			case 'group':
				array_set_path($xml, "system/{$section}", array_get_path($config_copy, "system/{$section}", []));
				array_set_path($xml, "system/nextgid", array_get_path($config_copy, 'system/nextgid'));
				break;
			case 'authserver':
				array_set_path($xml, "system/{$section}", array_get_path($config_copy, "system/{$section}", []));
				break;
			default:
				array_set_path($xml, $section, array_get_path($config_copy, $section, []));
		}
	}

	if (array_path_enabled($config_copy, 'hasync', 'adminsync')) {
		array_set_path($xml, 'hasync/adminsync', array_get_path($config_copy, 'hasync/adminsync'));
	}

	$resp = $rpc_client->xmlrpc_method('restore_config_section', $xml, 900);
	if ($resp != null) {
		$url = $rpc_client->getUrl();
		update_filter_reload_status("XMLRPC sync successfully completed with {$url}.");
		if (config_get_path('hasync/new_password')) {
			update_filter_reload_status("Updating XMLRPC sync password.");
			config_set_path('hasync/password', config_get_path('hasync/new_password'));
			config_del_path('hasync/new_password');
			write_config("Update XMLRPC sync password.");
		}
		return true;
	}
	return false;
}

if (platform_booting()) {
	return;
}

if (config_get_path('hasync')) {
	update_filter_reload_status("Building high availability sync information");
	$hasync = config_get_path('hasync', []);
	$sections = array();

	if (empty($hasync['synchronizetoip'])) {
		/* this gets hit on every filter sync on the secondary, a log here creates a lot of log spam and I never saw it actually log anything useful */
		return;
	}

	if ($hasync['synchronizerules'] != "") {
		config_init_path('filter');
		$sections[] = 'filter';
	}
	if ($hasync['synchronizenat'] != "") {
		config_init_path('nat');
 		$sections[] = 'nat';
	}
	if ($hasync['synchronizealiases'] != "") {
		config_init_path('aliases');
		$sections[] = 'aliases';
	}
	if ($hasync['synchronizedhcpd'] != "" and is_array(config_get_path('dhcpd'))) {
		$sections[] = 'dhcpd';
	}
	if ($hasync['synchronizedhcrelay'] != "" and is_array(config_get_path('dhcrelay'))) {
		$sections[] = 'dhcrelay';
	}
	if ($hasync['synchronizedhcrelay6'] != "" and is_array(config_get_path('dhcrelay6'))) {
		$sections[] = 'dhcrelay6';
	}
	if ($hasync['synchronizewol'] != "") {
		config_init_path('wol');
		$sections[] = 'wol';
	}
	if ($hasync['synchronizetrafficshaper'] != "") {
		config_init_path('shaper');
		$sections[] = 'shaper';
	}
	if ($hasync['synchronizetrafficshaperlimiter'] != "") {
		config_init_path('dnshaper');
		$sections[] = 'dnshaper';
	}
	if ($hasync['synchronizestaticroutes'] != "") {
		config_init_path('staticroutes/route');
		config_init_path('gateways');
		$sections[] = 'staticroutes';
		$sections[] = 'gateways';
	}
	if ($hasync['synchronizevirtualip'] != "") {
		config_init_path('virtualip');
		$sections[] = 'virtualip';
	}
	if ($hasync['synchronizeipsec'] != "") {
		config_init_path('ipsec');
		$sections[] = 'ipsec';
	}
	if ($hasync['synchronizeopenvpn'] != "") {
		config_init_path('openvpn');
		$sections[] = 'openvpn';
	}
	if ($hasync['synchronizecerts'] != "" || $hasync['synchronizeopenvpn'] != "") {
		config_init_path('cert');
		config_init_path('ca');
		config_init_path('crl');
		$sections[] = 'cert';
		$sections[] = 'ca';
		$sections[] = 'crl';
	}
	if ($hasync['synchronizeusers'] != "") {
		$sections[] = 'user';
		$sections[] = 'group';
	}
	if ($hasync['synchronizeauthservers'] != "") {
		config_init_path('authserver');
		$sections[] = 'authserver';
	}
	if ($hasync['synchronizednsforwarder'] != "") {
		if (is_array(config_get_path('dnsmasq'))) {
			$sections[] = 'dnsmasq';
		}
		if (is_array(config_get_path('unbound'))) {
			$sections[] = 'unbound';
		}
	}
	if ($hasync['synchronizeschedules'] != "" || $hasync['synchronizerules'] != "") {
		$sections[] = 'schedules';
	}
	if ($hasync['synchronizecaptiveportal'] != "") {
		config_init_path('captiveportal');
		$sections[] = 'captiveportal';
	}
	if ($hasync['synchronizecaptiveportal'] != "" and is_array(config_get_path('voucher'))) {
		$sections[] = 'voucher';
	}

	if (is_array($sections) && count($sections) <= 0) {
		log_error("Nothing has been configured to be synched. Skipping....");
		return;
	}

	$rpc_client = new pfsense_xmlrpc_client();

	if (!carp_check_version($rpc_client)) {
		return;
	}

	update_filter_reload_status("Signaling CARP reload signal...");
	if (!carp_sync_xml($rpc_client, $sections)) {
		return;
	}
}
