#!/usr/local/bin/php-cgi -f
<?php
/*
 * rc.banner
 *
 * part of pfSense
 * Copyright (c) 2005 Colin Smith
 * Copyright (c) 2005-2013 BSD Perimeter
 * Copyright (c) 2013-2016 Electric Sheep Fencing
 * Copyright (c) 2014-2024 Rubicon Communications, LLC (Netgate)
 * All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* parse the configuration and include all functions used below */
require_once("config.inc");
require_once("gwlb.inc");
require_once("interfaces.inc");

$hostname = config_get_path('system/hostname');
$machine = trim(`uname -m`);

/* Export the product variable. */
if (is_writable("/etc")) {
	$handle = NULL;
	if (!file_exists("/etc/product_name") || is_writable("/etc/product_name"))
		$handle = fopen("/etc/product_name", 'w');
	if ($handle != NULL)
		fwrite($handle, $g['product_name']);
	if ($handle != NULL)
		fclose($handle);

	$handle = NULL;
	if (!file_exists("/etc/product_label") || is_writable("/etc/product_label"))
		$handle = fopen("/etc/product_label", 'w');
	if ($handle != NULL)
		fwrite($handle, $g['product_label']);
	if ($handle != NULL)
		fclose($handle);
}

$platform = system_identify_specific_platform();
$serial = system_get_serial();
if (isset($platform['descr'])) {
	printf("%s - ", $platform['descr']);
}
if (!empty($serial)) {
	printf("%s: %s - ", gettext("Serial"), $serial);
}
printf("%s: %s\n\n", gettext("Netgate Device ID"), system_get_uniqueid());

print "*** Welcome to {$g['product_label']} {$g['product_version_string']} ({$machine}) on {$hostname} ***\n";

$iflist = get_configured_interface_with_descr(true);

// calculate max string widths for the banner
$realif_wdith = 1;
$tobanner_wdith = 1;
foreach ($iflist as $ifname => $friendly) {
	$realif = get_real_interface($ifname);
	$realif_length = strlen($realif);
	if ($realif_length > $realif_wdith) {
		$realif_wdith = $realif_length;
	}
	$tobanner = "{$friendly} ({$ifname})";
	$tobanner_length = strlen($tobanner);
	if ($tobanner_length > $tobanner_wdith) {
		$tobanner_wdith = $tobanner_length;
	}
}
$v6line_width = $realif_wdith + $tobanner_wdith + 9;

// print the banner
foreach ($iflist as $ifname => $friendly) {
	/* point to this interface's config */
	$ifconf = config_get_path("interfaces/{$ifname}");
	/* look for 'special cases' */
	switch ($ifconf['ipaddr']) {
		case "dhcp":
			$class = "/DHCP4";
			break;
		case "pppoe":
			$class = "/PPPoE";
			break;
		case "pptp":
			$class = "/PPTP";
			break;
		case "l2tp":
			$class = "/L2TP";
			break;
		default:
			$class = "";
			break;
	}
	switch ($ifconf['ipaddrv6']) {
		case "dhcp6":
			$class6 = "/DHCP6";
			break;
		case "slaac":
			$class6 = "/SLAAC";
			break;
		case "6rd":
			$class6 = "/6RD";
			break;
		case "6to4":
			$class6 = "/6to4";
			break;
		case "track6":
			$class6 = "/t6";
			break;
		default:
			$class6 = "";
			break;
	}
	$ipaddr = get_interface_ip($ifname);
	$subnet = get_interface_subnet($ifname);
	$ipaddr6 = get_interface_ipv6($ifname);
	$subnet6 = get_interface_subnetv6($ifname);
	$realif = get_real_interface($ifname);
	$tobanner = "{$friendly} ({$ifname})";

	printf("\n %-{$tobanner_wdith}s -> %-{$realif_wdith}s -> ",
		$tobanner,
		$realif
	);
	$v6first = false;
	if (!empty($ipaddr) && !empty($subnet)) {
		printf("v4%s: %s/%s",
			$class,
			$ipaddr,
			$subnet
		);
	} else {
		$v6first = true;
	}
	if (!empty($ipaddr6) && !empty($subnet6)) {
		if (!$v6first) {
			printf("\n%s", str_repeat(" ", $v6line_width));
		}
		printf("v6%s: %s/%s",
			$class6,
			$ipaddr6,
			$subnet6
		);
	}
}
printf("\n");
?>
