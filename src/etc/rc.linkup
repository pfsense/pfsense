#!/usr/local/bin/php-cgi -f
<?php
/*
 * rc.linkup
 *
 * part of pfSense (https://www.pfsense.org)
 * Copyright (c) 2004-2018 Rubicon Communications, LLC (Netgate)
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* parse the configuration and include all functions used below */
require_once("globals.inc");
require_once("config.inc");
require_once("filter.inc");
require_once("shaper.inc");
require_once("interfaces.inc");

if (platform_booting()) {
	return;
}

function handle_argument_group($iface, $argument2) {
	global $config;

	if (!is_array($config['interfaces'][$iface])) {
		log_error("Cannot find interface configuration for {$iface}");
		return;
	}

	if (!isset($config['interfaces'][$iface]['enable'])) {
		log_error("Linkup detected on disabled interface...Ignoring");
		return;
	}

	if (empty($config['interfaces'][$iface]['ipaddr'])) {
		$ipaddr = '';
	} else {
		$ipaddr = $config['interfaces'][$iface]['ipaddr'];
	}

	if (empty($config['interfaces'][$iface]['ipaddrv6'])) {
		$ip6addr = '';
	} else {
		$ip6addr = $config['interfaces'][$iface]['ipaddrv6'];
	}

	$staticv4 = false;
	if (empty($ipaddr)) {
		$staticv4 = true;
	} else {
		$staticv4 = is_ipaddrv4($ipaddr);
	}
	$staticv6 = false;
	if (empty($ip6addr)) {
		$staticv6 = true;
	} else {
		$staticv6 = is_ipaddrv6($ip6addr);
	}

	/* Take care of events on bridge members when IP is configured on bridge */
	$bridge_if = link_interface_to_bridge($iface);
	if (!empty($bridge_if) && empty($ipaddr) && empty($ip6addr)) {
		log_error("Ignoring link event for bridge member without IP config");

		return;
	}

	if ($staticv4 === true && $staticv6 === true) {
		$friendly = convert_friendly_interface_to_friendly_descr($iface);
		log_error("Hotplug event detected for {$friendly}({$iface}) static IP ({$ipaddr} {$ip6addr})");
		interfaces_staticarp_configure($iface);
		switch ($argument2) {
			case 'start':
			case 'up':
				$iface = get_real_interface($iface);
				/* NOTE: Do not generate event for OpenVPN since the daemon does that for us. */
				if (substr($iface, 0, 4) != "ovpn") {
					send_event("interface newip {$iface}");
				}
				break;
		}
	} else {
		switch ($argument2) {
			case "stop":
			case "down":
				log_error("DEVD Ethernet detached event for {$iface}");
				interface_bring_down($iface);
				break;
			case "start":
			case "up":
				log_error("DEVD Ethernet attached event for {$iface}");
				log_error("HOTPLUG: Configuring interface {$iface}");
				// Do not try to readd to bridge otherwise em(4) has problems
				interface_configure($iface, true, true);
				break;
		}
	}
}

if (isset($_GET['interface'])) {
	if (!empty($_GET['interface'])) {
		$realiface = $_GET['interface'];
	}
	$action = $_GET['action'];
} else {
	if ($argc < 3) {
		log_error("HOTPLUG event: The required number of parameters not passed!");
		return;
	}
	$action = $argv[1];
	$realiface = $argv[2];
}

switch ($action) {
	case "start":
	case "stop":
		break;
	default:
		log_error("HOTPLUG event: Action parameter ($action) passed is wrong - only start/stop/up/down are allowed!");
		return;
		/* NOTREACHED */
		break;
}

if (!empty($realiface)) {
	if (substr($realiface, 0, 4) == 'ovpn') {
		log_error("Ignoring link event for ovpn interface");
		return;
	}
	$rclinkuplock = lock("rclinkup{$realiface}", LOCK_EX);
	$interface = convert_real_interface_to_friendly_interface_name($realiface);
	if (!empty($interface)) {
		handle_argument_group($interface, $action);
	}
	if ($action == 'start') {
		/* Check if there is any child on this one as ppp types and trigger them */
		if (is_array($config['ppps']['ppp'])) {
			foreach ($config['ppps']['ppp'] as $pppidx => $ppp) {
				if ($ppp['type'] == 'ppp') {
					continue;
				}
				$ports = explode(',', $ppp['ports']);
				foreach ($ports as $pid => $parent_if) {
					/* The loop here is because ppp types can have real and assigned interfaces as members */
					$tmpiface = get_real_interface($parent_if);
					if ($tmpiface != $realiface) {
						continue;
					}
					$tmpiface = convert_real_interface_to_friendly_interface_name($ppp['if']);
					if (!empty($tmpiface)) {
						interface_configure($tmpiface, true, true);
					}
				}
			}
		}
	}
	filter_configure();
	unlock($rclinkuplock);
}
?>
